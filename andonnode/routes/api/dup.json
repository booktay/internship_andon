{"duplicates":[{"lines":6,"tokens":74,"firstFile":{"start":52,"name":"/home/pi/internship_andon/andonnode/routes/api/code/src/github.com/crsherbet/restapi/main.go"},"secondFile":{"start":69,"name":"/home/pi/internship_andon/andonnode/routes/api/code/src/github.com/crsherbet/restapi/main.go"},"fragment":"func updateBook(w http.ResponseWriter, r *http.Request){\n\tw.Header().Set(&quot;Content-Type&quot;, &quot;application/json&quot;)\n\tparams := mux.Vars(r)\n\tfor index, item := range books {\n\t\t\tif item.ID == params[&quot;id&quot;]{\n\t\t\tbooks = append(books[:index], books[index+1:]...)\n\t\t\tvar book Book"},{"lines":94,"tokens":644,"firstFile":{"start":2,"name":"/home/pi/internship_andon/andonnode/routes/api/code/src/github.com/crsherbet/restapi/main.go"},"secondFile":{"start":2,"name":"/home/pi/internship_andon/andonnode/routes/api/code/src/main.go"},"fragment":"import (\n\t&quot;encoding/json&quot;\n\t&quot;log&quot;\n\t&quot;net/http&quot;\n\t&quot;math/rand&quot;\n\t&quot;strconv&quot;\n\t&quot;github.com/gorilla/mux&quot;\n)\n\ntype Book struct {\n\tID string &quot;json:&#x27;id&quot;\n\tIsbn string &quot;json:&#x27;isbn&#x27;&quot;\n\tTitle string &quot;json:&#x27;title&#x27;&quot;\n\tAuthor *Author &quot;json:&#x27;author&#x27;&quot;\n}\n\ntype Author struct {\n\tFirstname string &quot;json:&#x27;firstname&#x27;&quot;\n\tLastname string &quot;json:&#x27;lastname&#x27;&quot;\n}\n\nvar books []Book\n\nfunc getBooks(w http.ResponseWriter, r *http.Request){\n\tw.Header().Set(&quot;Content-Type&quot;, &quot;application/json&quot;)\n\tjson.NewEncoder(w).Encode(books)\n}\n\nfunc getBook(w http.ResponseWriter, r *http.Request){\n\tw.Header().Set(&quot;Content-Type&quot;, &quot;application/json&quot;)\n\tparams := mux.Vars(r)\n\tfor _, item := range books {\n\t\tif item.ID == params[&quot;id&quot;] {\n\t\t\tjson.NewEncoder(w).Encode(item)\n\t\t\treturn\n\t\t}\n\t}\n\tjson.NewEncoder(w).Encode(&amp;Book{})\n\t\n}\n\nfunc createBook(w http.ResponseWriter, r *http.Request){\n\tw.Header().Set(&quot;Content-Type&quot;, &quot;application/json&quot;)\n\tvar book Book\n\t_ = json.NewDecoder(r.Body).Decode(&amp;book)\n\tbook.ID = strconv.Itoa(rand.Intn(10000000))\n\tbooks = append(books, book)\n\tjson.NewEncoder(w).Encode(book)\n}\n\nfunc updateBook(w http.ResponseWriter, r *http.Request){\n\tw.Header().Set(&quot;Content-Type&quot;, &quot;application/json&quot;)\n\tparams := mux.Vars(r)\n\tfor index, item := range books {\n\t\t\tif item.ID == params[&quot;id&quot;]{\n\t\t\tbooks = append(books[:index], books[index+1:]...)\n\t\t\tvar book Book\n\t\t\t_ = json.NewDecoder(r.Body).Decode(&amp;book)\n\t\t\tbook.ID = strconv.Itoa(rand.Intn(10000000))\n\t\t\tbooks = append(books, book)\n\t\t\tjson.NewEncoder(w).Encode(book)\n\t\t\treturn\n\t\t}\n\t}\n\tjson.NewEncoder(w).Encode(books)\n}\n\nfunc deleteBook(w http.ResponseWriter, r *http.Request){\n\tw.Header().Set(&quot;Content-Type&quot;, &quot;application/json&quot;)\n\tparams := mux.Vars(r)\n\tfor index, item := range books {\n\t\t\tif item.ID == params[&quot;id&quot;]{\n\t\t\tbooks = append(books[:index], books[index+1:]...)\n\t\t\tbreak\n\t\t}\n\t}\n\tjson.NewEncoder(w).Encode(books)\n}\n\n\nfunc main() {\n\tr := mux.NewRouter()\n\n\tbooks = append(books, Book{ID: &quot;1&quot;, Isbn: &quot;448743&quot;, Title:&quot;Book One&quot;, Author: &amp;Author{Firstname:&quot;John&quot;, Lastname:&quot;Doe&quot;}})\n\tbooks = append(books, Book{ID: &quot;2&quot;, Isbn: &quot;888743&quot;, Title:&quot;Book Two&quot;, Author: &amp;Author{Firstname:&quot;Steve&quot;, Lastname:&quot;Smith&quot;}})\n\n\tr.HandleFunc(&quot;/api/getBooks&quot;, getBooks).Methods(&quot;GET&quot;)\n\tr.HandleFunc(&quot;/api/getBook/{id}&quot;, getBook).Methods(&quot;GET&quot;)\n\tr.HandleFunc(&quot;/api/createBook&quot;, createBook).Methods(&quot;POST&quot;)\n\tr.HandleFunc(&quot;/api/updateBook/{id}&quot;, updateBook).Methods(&quot;PUT&quot;)\n\tr.HandleFunc(&quot;/api/deleteBook/{id}&quot;, deleteBook).Methods(&quot;DELETE&quot;)\n\n\tlog.Fatal(http.ListenAndServe(&quot;:8000&quot;, r))\n}"}],"statistics":{"clones":2,"duplications":100,"files":2,"percentage":"52.08","lines":192}}